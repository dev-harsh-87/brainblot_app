rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // HELPER FUNCTIONS
    // ========================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if user has a specific role
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }
    
    // Check if user is premium or higher
    function isPremiumUser() {
      return isAuthenticated() && getUserData().role in ['premium', 'admin'];
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user has a specific subscription plan
    function hasSubscriptionPlan(plan) {
      return isAuthenticated() && getUserData().subscription.plan == plan;
    }
    
    // Check if user has access to a module based on subscription
    function hasModuleAccess(moduleName) {
      let subscription = getUserData().subscription;
      return isAuthenticated() && (
        subscription.plan == 'premium' ||
        subscription.plan == 'pro' ||
        moduleName in subscription.features
      );
    }
    
    // Check if user can modify role (only admins)
    function canModifyRole() {
      return isAdmin() &&
             (!request.resource.data.keys().hasAny(['role']) ||
              request.resource.data.role != 'admin');
    }
    
    // ========================================
    // USERS COLLECTION
    // ========================================
    
    match /users/{userId} {
      // Anyone can read their own profile
      // Admins can read all profiles
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile (during registration)
      allow create: if isOwner(userId) && 
                       request.resource.data.role == 'user'; // Default role
      
      // Users can update their own profile (except role and subscription)
      // Admins can update any profile
      allow update: if (isOwner(userId) && 
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'subscription'])) ||
                       (isAdmin() && canModifyRole());
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // ========================================
    // SUBSCRIPTION PLANS COLLECTION
    // ========================================
    
    match /subscription_plans/{planId} {
      // Anyone authenticated can read active plans
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete plans
      allow create, update, delete: if isAdmin();
    }
    
    // ========================================
    // DRILLS COLLECTION
    // ========================================
    
    match /drills/{drillId} {
      // Users can only read their own drills
      // Admins can read all drills
      allow read: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create drills if they have access to the drills module
      allow create: if isAuthenticated() &&
                       hasModuleAccess('drills') &&
                       request.resource.data.createdBy == request.auth.uid;
      
      // Users can update their own drills
      // Admins can update any drill
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
      
      // Users can delete their own drills
      // Admins can delete any drill
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }
    
    // ========================================
    // PROGRAMS COLLECTION
    // ========================================
    
    match /programs/{programId} {
      // Users can only read their own programs
      // Admins can read all programs
      allow read: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create programs if they have access to the programs module
      allow create: if isAuthenticated() &&
                       hasModuleAccess('programs') &&
                       request.resource.data.createdBy == request.auth.uid;
      
      // Users can update their own programs
      // Admins can update any program
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
      
      // Users can delete their own programs
      // Admins can delete any program
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }
    
    // ========================================
    // SESSIONS COLLECTION (Drill Results)
    // ========================================
    
    match /sessions/{sessionId} {
      // Users can only read their own sessions
      // Admins can read all sessions
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create their own sessions
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Users can update their own sessions
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
      
      // Users can delete their own sessions
      // Admins can delete any session
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }
    
    // ========================================
    // PROGRAM PROGRESS COLLECTION
    // ========================================
    
    match /program_progress/{progressId} {
      // Users can only read their own progress
      // Admins can read all progress
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create their own progress
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Users can update their own progress
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
      
      // Users can delete their own progress
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // ========================================
    // STATS COLLECTION
    // ========================================
    
    match /stats/{userId} {
      // Users can only read their own stats
      // Admins can read all stats
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can update their own stats
      allow create, update: if isOwner(userId);
      
      // Only admins can delete stats
      allow delete: if isAdmin();
    }
    
    // ========================================
    // MULTIPLAYER SESSIONS COLLECTION
    // ========================================
    
    match /multiplayer_sessions/{sessionId} {
      // Users can read sessions they're part of
      // Admins can read all sessions
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      
      // Users can create multiplayer sessions
      allow create: if isAuthenticated() && 
                       hasModuleAccess('multiplayer') &&
                       request.auth.uid == request.resource.data.hostId;
      
      // Host or admins can update sessions
      allow update: if isAuthenticated() && (
        resource.data.hostId == request.auth.uid ||
        isAdmin()
      );
      
      // Host or admins can delete sessions
      allow delete: if isAuthenticated() && (
        resource.data.hostId == request.auth.uid ||
        isAdmin()
      );
    }
    
    // ========================================
    // SHARED CONTENT COLLECTION
    // ========================================
    
    match /shared_content/{contentId} {
      // Anyone authenticated can read public shared content
      allow read: if isAuthenticated() && resource.data.isPublic == true;
      
      // Users with premium or higher can share content
      allow create: if isPremiumUser() &&
                       request.resource.data.sharedBy == request.auth.uid;
      
      // Owners can update their shared content
      allow update: if isAuthenticated() && 
                       resource.data.sharedBy == request.auth.uid;
      
      // Owners or admins can delete shared content
      allow delete: if isAuthenticated() && (
        resource.data.sharedBy == request.auth.uid ||
        isAdmin()
      );
    }
    
    // ========================================
    // ADMIN LOGS COLLECTION (Optional)
    // ========================================
    
    match /admin_logs/{logId} {
      // Only admins can read logs
      allow read: if isAdmin();
      
      // Only system can create logs (through server-side code)
      allow create: if false;
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // ========================================
    // SETTINGS COLLECTION
    // ========================================
    
    match /settings/{userId} {
      // Users can only access their own settings
      allow read, write: if isOwner(userId);
    }
    
    // ========================================
    // DEFAULT DENY
    // ========================================
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
