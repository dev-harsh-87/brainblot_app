rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp;
    }
    
    function isValidString(str, minLength, maxLength) {
      return str is string && str.size() >= minLength && str.size() <= maxLength;
    }

    // Users collection - user profiles and settings
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // User statistics subcollection
      match /statistics/{statId} {
        allow read, write: if isOwner(userId);
      }
      
      // User preferences subcollection
      match /preferences/{prefId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Global drills collection - available to all users
    match /drills/{drillId} {
      allow read: if true; // Public read access for all drills
      allow write: if isAuthenticated() && 
        (resource == null || resource.data.createdBy == request.auth.uid || resource.data.isPreset == false);
      
      function isValidDrill() {
        let data = request.resource.data;
        return data.keys().hasAll(['name', 'category', 'difficulty', 'durationSec', 'restSec', 'reps', 'stimulusTypes', 'numberOfStimuli', 'zones', 'colors', 'isPreset', 'createdAt']) &&
               isValidString(data.name, 1, 100) &&
               isValidString(data.category, 1, 50) &&
               data.difficulty in ['beginner', 'intermediate', 'advanced'] &&
               data.durationSec is int && data.durationSec > 0 &&
               data.restSec is int && data.restSec >= 0 &&
               data.reps is int && data.reps > 0 &&
               data.stimulusTypes is list &&
               data.numberOfStimuli is int && data.numberOfStimuli > 0 &&
               data.zones is list &&
               data.colors is list &&
               data.isPreset is bool &&
               isValidTimestamp(data.createdAt);
      }
      
      allow create: if isAuthenticated() && isValidDrill();
      allow update: if isAuthenticated() && isValidDrill() && 
        (resource.data.createdBy == request.auth.uid || !resource.data.isPreset);
    }

    // Global programs collection - available to all users
    match /programs/{programId} {
      allow read: if true; // Public read access for all programs
      allow write: if isAuthenticated() && 
        (resource == null || resource.data.createdBy == request.auth.uid || resource.data.createdBy == null);
      
      function isValidProgram() {
        let data = request.resource.data;
        return data.keys().hasAll(['name', 'category', 'totalDays', 'days', 'level', 'createdAt']) &&
               isValidString(data.name, 1, 100) &&
               isValidString(data.category, 1, 50) &&
               data.totalDays is int && data.totalDays > 0 &&
               data.days is list && data.days.size() == data.totalDays &&
               isValidString(data.level, 1, 20) &&
               isValidTimestamp(data.createdAt);
      }
      
      allow create: if isAuthenticated() && isValidProgram();
      allow update: if isAuthenticated() && isValidProgram() && 
        (resource.data.createdBy == request.auth.uid || resource.data.createdBy == null);
    }

    // User-specific active programs
    match /user_active_programs/{userId} {
      allow read, write: if isOwner(userId);
    }

    // User-specific completed programs
    match /user_completed_programs/{userId} {
      match /programs/{programId} {
        allow read, write: if isOwner(userId);
      }
    }

    // User-specific drill sessions
    match /user_sessions/{userId} {
      allow read, write: if isOwner(userId);
      
      match /sessions/{sessionId} {
        allow read, write: if isOwner(userId);
        
        function isValidSession() {
          let data = request.resource.data;
          return data.keys().hasAll(['drillId', 'startedAt', 'endedAt', 'events', 'metadata']) &&
                 isValidString(data.drillId, 1, 50) &&
                 isValidTimestamp(data.startedAt) &&
                 isValidTimestamp(data.endedAt) &&
                 data.events is list &&
                 data.metadata is map;
        }
        
        allow create: if isOwner(userId) && isValidSession();
        allow update: if isOwner(userId) && isValidSession();
      }
    }

    // User-specific drill favorites
    match /user_favorites/{userId} {
      match /drills/{drillId} {
        allow read, write: if isOwner(userId);
      }
    }

    // User-specific program favorites
    match /user_program_favorites/{userId} {
      match /programs/{programId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Global leaderboards (read-only for users, write for admin functions)
    match /leaderboards/{leaderboardId} {
      allow read: if true;
      allow write: if false; // Only admin functions can write to leaderboards
    }

    // Analytics and aggregated data (read-only for users)
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin functions can write analytics
    }

    // System metadata and configuration
    match /system/{configId} {
      allow read: if true;
      allow write: if false; // Only admin functions can write system config
    }
  }
}
